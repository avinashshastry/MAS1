LENIER SEARCH 
#include<stdio.h>
void main()
{
    int arr[50],n,ele,loc=0;
    printf("Enter the size of array:");
    scanf("%d",&n);
    printf("Enter the array elements:\n");
    for(int i=0;i<n;i++)
    {
        scanf("%d",&arr[i]);
    }
    printf("Enter the elements to be searched:");
    scanf("%d",&ele);
    for(int i=0;i<n;i++)
    {
        if(arr[i]==ele)
        {
            loc=i;
            break;
        }
    }
    if(loc>=0)
    {
        printf("The elements %d found at position %d",ele,loc+1);
    }
    else
    {
        printf("Element Not Found!!!");
    }

}










//binary search

#include<stdio.h>void main()
void main()
{
    int a[50],n,ele,low, mid ,high,x;
    printf("Enter the size of array:");
    scanf("%d",&n);
    printf("Enter the array elements:\n");
    for(int i=0;i<n;i++)
    {
        scanf("%d",&a[i]);
    }
     printf("enter the element to seach");
      scanf("%d",&ele);

    while(low<=high)
    {
        low=a[0];
        high=a[n-1];

        int mid=(low+high)/2;
        if(a[mid]==ele)
            return mid;
        else if(a[mid]==ele)
            low=mid+1;
        else
        high=mid-1;

    }
    printf("the aliment is %d:",mid);

}







//bubble sort
#include<stdio.h>
void bubble_sort(int arr[],int n)
{
    int i,j;
    for(i=0;i<n-1;i++)
    {
        for(j=0;j<n-i-1;j++)
        {
            if(arr[j]>arr[j+1])
            {
                int temp=arr[j];
                arr[j]=arr[j+1];
                arr[j+1]=temp;
            }
        }
    }
}


void main()
{
    int arr[50],n;
    printf("Enter the size of array:");
    scanf("%d",&n);
    printf("Enter the array elements:\n");
    for(int i=0;i<n;i++)
    {
        scanf("%d",&arr[i]);
    }
    bubble_sort(arr,n);
    printf("Sorted Array elements:\n");
    for(int i=0;i<n;i++)
    {
        printf("%d \n",arr[i]);
    }
}




// SELECTION
#include<stdio.h>
void main()
{
    int a[50],n,ele,low,j ,small,x;
    printf("Enter the size of array:");
    scanf("%d",&n);
    printf("Enter the array elements:\n");
    for(int i=0;i<n;i++)
    {
        scanf("%d",&a[i]);
    }
      for(int i=0;i<n;i++)
      {
      small==1;
      for(j=i+1; j<n;j++)
      {
          if(a[j]<a[small])

          small=j;
          int temp=a[small];
          a[small]=a[i];
          a[i]=temp;
      }
      }
      printf("Sorted Array elements:\n");
    for(int i=0;i<n;i++)
    {
        printf("%d \n",a[i]);
    }
}





#include <stdio.h>
#include <stdlib.h>
#define MAX_SIZE 3


// Structure for stack
struct Stack {
    int items[MAX_SIZE];
    int top;
};

// initialize stack
void initializeStack(struct Stack *s) {
    s->top = -1;
}

//  if stack is full
int isFull(struct Stack *s) {
    return s->top == MAX_SIZE - 1;
}

//  if stack is empty
int isEmpty(struct Stack *s) {
    return s->top == -1;
}






//  push element onto stack
void push(struct Stack *s) {
    int value;

    if (isFull(s)) {
        printf("\nStack is full! Cannot push element.\n");
        return;
    }

    printf("\nEnter the value to push: ");
    scanf("%d", &value);

    s->top++;
    s->items[s->top] = value;
    printf("\nPushed %d to stack\n", value);
}

//  pop element from stack
void pop(struct Stack *s) {
    if (isEmpty(s)) {
        printf("\nStack is empty! Cannot pop element.\n");
        return;
    }

    printf("\nPopped %d from stack\n", s->items[s->top]);
    s->top--;
}

// display stack elements
void display(struct Stack *s) {
    if (isEmpty(s)) {
        printf("\nStack is empty!\n");
        return;
    }

    printf("\nStack elements are:\n");
    for (int i = s->top; i >= 0; i--) {
        printf("%d\n", s->items[i]);
    }
}

int main() {
    struct Stack stack;
    initializeStack(&stack);
    int choice;

    while (1) {
        printf("\n=== Stack Operations ===");
        printf("\n1. Push");
        printf("\n2. Pop");
        printf("\n3. Display");
        printf("\n4. Exit");
        printf("\nEnter your choice (1-4): ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                push(&stack);
                break;

            case 2:
                pop(&stack);
                break;

            case 3:
                display(&stack);
                break;

            case 4:
                printf("\nExiting program. Goodbye!\n");
                exit(0);

            default:
                printf("\nInvalid choice! Please try again.\n");
        }
    }

    return 0;
}









// POSTFIX EXP 
#include <stdio.h>
#include <ctype.h>
#include <stdlib.h>

#define SIZE 40

int pop();
void push(int);

char postfix[SIZE];
int stack[SIZE], top = -1;

int main()
{
	int i, a, b, result, pEval;
	char ch;
	
	for(i=0; i<SIZE; i++)
	{
		stack[i] = -1;
	}
	printf("\nEnter a postfix expression: ");
	scanf("%s",postfix);

	for(i=0; postfix[i] != '\0'; i++)
	{
		ch = postfix[i];

		if(isdigit(ch))
		{
			push(ch-'0');
		}
		else if(ch == '+' || ch == '-' || ch == '*' || ch == '/')
		{
			b = pop();
			a = pop();
			
			switch(ch)
			{
				case '+': result = a+b;
					  break;
				case '-': result = a-b;
					  break;
				case '*': result = a*b;
					  break;
				case '/': result = a/b;
					  break;
				case '%':result = a%b;
					  break;
			}
			
			push(result);
		}		
	
	}

	pEval = pop();
	
	printf("\nThe postfix evaluation is: %d\n",pEval);
	
	return 0;
}

void push(int n)
{
	if (top < SIZE -1)
	{
		stack[++top] = n;
	}
	else
	{
		printf("Stack is full!\n");
		exit(-1);
	}
}
int pop()
{	
	int n;
	if (top > -1)
	{
		n = stack[top];
		stack[top--] = -1;
		return n;
	}
	else
	{
		printf("Stack is empty!\n");
		exit(-1);
	}
}












//Q PO

#include <stdio.h>
#include <conio.h>
#define max 100
int queue[max];
int front=-1,rear=-1;
void Insert_Element();
void Delete_Element();
void Display_Queue();
void Empty_Queue();

int main(void) {
	int choice;
	printf("--------------------------Entre the choice u want-------------------------\n");
	do{
		printf("\n\n 1.Insert an element");
        printf("\n 2.Delete an element");
        printf("\n 3.Display queue");
        printf("\n 4.Empty queue");
        printf("\n 5.Exit");
        printf("\n Enter your choice: ");
	    scanf("%d",&choice);
	    switch(choice){
	    	case 1: Insert_Element();
            break;
            case 2: Delete_Element();
            break;
            case 3: Display_Queue();
            break;
            case 4: Empty_Queue();
            break;
            case 5:
            return 0;
	    	
	    }
		
	}while(choice!=5);
    return 0;
}
void Insert_Element(){
	int n;
	if(rear<max-1){
		if(front==-1)                                           //Queue is empty
		front=0;
		printf("Entre the Element to inserted in queue\n");
		scanf("%d",&n);
		queue[++rear]=n;
	}
	else
	printf("Queue is overflow\n");
	
}
void Delete_Element(){
	int n;                                           
	if(front==-1 || front>rear){                        //one more condition u can do
		printf("Queue Underflow\n");                //else if(front==rear){
	}                                                   //n=queue[front];
	else                                                //front=rear=-1;
	{                                                   //}
		n=queue[front++];                  
		printf("The element deleted :- %d\n",n);
	}
}
void Display_Queue(){
	int i;
	if(front==-1 || front>rear){
		printf("No element to be displayed\n");
	}
	else{
		printf("The Number of element in Queue\n");
		for(i=front;i<=rear;i++){
			printf("Element at %d is %d \n",i,queue[i]);
		}
	}
}
void Empty_Queue(){
/*Reset queue or Creates Empty queue*/
front = -1;
rear = -1;
printf("\n New Queue created successfully.\n");
}







//binary seach tree 
#include <stdio.h>
#include <stdlib.h>

// Structure for a node in the binary search tree
struct Node {
    int data;
    struct Node* left;
    struct Node* right;
};

// Function to create a new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (newNode == NULL) {
        printf("Memory allocation failed!\n");
        exit(1);
    }
    newNode->data = data;
    newNode->left = newNode->right = NULL;
    return newNode;
}

// Function to insert a node into the binary search tree
struct Node* insert(struct Node* root, int data) {
    if (root == NULL) {
        return createNode(data);
    }
    if (data < root->data) {
        root->left = insert(root->left, data);
    } else {
        root->right = insert(root->right, data);
    }
    return root;
}

// Function to free the tree memory
void freeTree(struct Node* root) {
    if (root != NULL) {
        freeTree(root->left);
        freeTree(root->right);
        free(root);
    }
}

// In-order traversal (Left, Root, Right)
void inorder(struct Node* root) {
    if (root != NULL) {
        inorder(root->left);
        printf("%d ", root->data);
        inorder(root->right);
    }
}

// Pre-order traversal (Root, Left, Right)
void preorder(struct Node* root) {
    if (root != NULL) {
        printf("%d ", root->data);
        preorder(root->left);
        preorder(root->right);
    }
}

// Post-order traversal (Left, Right, Root)
void postorder(struct Node* root) {
    if (root != NULL) {
        postorder(root->left);
        postorder(root->right);
        printf("%d ", root->data);
    }
}

int main() {
    struct Node* root = NULL;
    int values[] = {50, 30, 70, 20, 40, 60, 80};
    int n = sizeof(values) / sizeof(values[0]);

    // Insert values into BST
    for (int i = 0; i < n; i++) {
        root = insert(root, values[i]);
    }

    // Perform tree traversals
    printf("In-order traversal: ");
    inorder(root);
    printf("\n\n");

    printf("Pre-order traversal: ");
    preorder(root);
    printf("\n\n");

    printf("Post-order traversal: ");
    postorder(root);
    printf("\n\n");

    // Free the allocated memory
    freeTree(root);

    return 0;
}








// factorial

#include<stdio.h>

long long int recusionFactorial(int number)
{
    if (number >= 1)
    {
        return number * recusionFactorial(number - 1);
    }

    else
    {
        return 1;
    }
}

int main()
{
    int number;

    printf("Enter an integer number: ");

    scanf("%d",&number);

    if (number < 0)
    {

        printf("Undefined!!\nFactorial of a negative numbers is undefined.\n");

        return 0;
    }

    printf("Factorial of %d = %lld", number, recusionFactorial(number));

    return 0;
}
